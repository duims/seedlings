import unittest
import random
import tortoiseHare as th

class TestFunctions(unittest.TestCase):
    """
        Testing functions: Tests lists of variable lengths with cycles and without cycles.
        Cycles generated by passing list through makeALoop(theList, randomInt).
        The integer must be less than the length of the list.
        """

    def setUp(self):
        #test cases with no cycles
        self.empty=th.makeLinkedList([])
        self.oneElem=th.makeLinkedList([1])
        self.twoElem=th.makeLinkedList([2, 3])
        self.threeElem=th.makeLinkedList([4, 5, 6])
        self.longList=th.makeLinkedList([3, 34, 5, 6, 3, 2])

        #test cases with cycles
        self.oneLinked=th.makeALoop(th.makeLinkedList(['a']), 0)
        self.twoLinked=th.makeALoop(th.makeLinkedList(['b','c']), 1)
        self.threeLinked=th.makeALoop(th.makeLinkedList(['d','e','f']), 0)
        self.longLinked=th.makeALoop(th.makeLinkedList(['g', 'hi', 'j', 'klm', 'n', 'o']), (random.randint(0, 6)))       

    def tearDown(self):
        #kill it with fire
        del self.empty
        del self.oneElem
        del self.twoElem
        del self.threeElem
        del self.longList

        del self.oneLinked
        del self.twoLinked
        del self.threeLinked
        del self.longLinked


    #test all the straight lists:

    def test_emptyCycleFree(self):
        #Empty LL should be false.
        self.assertFalse(th.tortoiseHare(self.empty))
    
    def test_oneElemCycleFree(self):
        #one elem with no cycles should be false.
        self.assertFalse(th.tortoiseHare(self.oneElem))

    def test_twoElemCycleFree(self):
        #two elem with no cycles should be false.
        self.assertFalse(th.tortoiseHare(self.twoElem))

    def test_threeElemCycleFree(self):
        #three elements and no cycles should be false
        self.assertFalse(th.tortoiseHare(self.threeElem))
        
    def test_longListCycleFree(self):
        #linked list with no cycles should be false
        self.assertFalse(th.tortoiseHare(self.longList))

        
       
    # test all the cycles:

    def test_oneLinked(self):
        #should be true
        self.assertTrue(th.tortoiseHare(self.oneLinked))
        
    def test_twoLinked(self):
        #should be true
        self.assertTrue(th.tortoiseHare(self.twoLinked))
        
    def test_threeLinked(self):
        #should be true
        self.assertTrue(th.tortoiseHare(self.threeLinked))  

    def test_longLinked(self):
        #should be true
        self.assertTrue(th.tortoiseHare(self.longLinked))
                               

        


if __name__ == '__main__':
    unittest.main()
